" Vundle: https://github.com/VundleVim/Vundle.vim
" --------------------------------------------------------------------------
set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'derekwyatt/vim-scala'
Plugin 'JuliaLang/julia-vim'
Plugin 'jmcantrell/vim-virtualenv'
Plugin 'edkolev/tmuxline.vim'
Plugin 'sjl/gundo.vim'
Plugin 'bling/vim-bufferline'
Plugin 'airblade/vim-gitgutter.git'
Plugin 'godlygeek/csapprox'
Plugin 'altercation/vim-colors-solarized.git'
Plugin 'majutsushi/tagbar'
Plugin 'vim-scripts/supertab.git'
Plugin 'tomtom/tcomment_vim'
Plugin 'Raimondi/delimitMate'
Plugin 'haya14busa/incsearch.vim'
Plugin 'easymotion/vim-easymotion'
Plugin 'kien/ctrlp.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'powerline/powerline', {'rtp': 'powerline/bindings/vim/'}
Plugin 'chrisbra/csv.vim'
Plugin 'scrooloose/syntastic'
Plugin 'davidhalter/jedi-vim'
Plugin 'itchyny/lightline.vim'
Plugin 'itchyny/landscape.vim'
Plugin 'python-rope/rope'
Plugin 'tpope/vim-fugitive'
Plugin 'git://git.wincent.com/command-t.git'
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
Plugin 'terryma/vim-multiple-cursors'
call vundle#end()
filetype plugin indent on

" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just
" :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to
" auto-approve removal
" see :h vundle for more details or wiki for FAQ
" ----------------------------------------------------------------------------

" Pathogen
execute pathogen#infect()

" Jedi-Vim
let g:jedi#auto_initialization = 1
let g:jedi#auto_vim_configuration = 1
let g:jedi#use_tabs_not_buffers = 1

" SuperTab
let g:SuperTabDefaultCompletionType = "context"

" TagBar
let g:tagbar_usearrows = 1
nmap <F8> :TagbarToggle<CR>

" Activate Matchit used in Julia-Lang
runtime macros/matchit.vim

" Airline (Clone Powerline)
let g:airline_symbols = {}
let g:airline_theme='powerlineish'
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tmuxline#enabled = 0
set laststatus=2
set statusline=%<%f\    " Filename
set statusline+=%w%h%m%r " Options
set statusline+=%{fugitive#statusline()} "  Git Hotness
set statusline+=\ [%{&ff}/%Y]            " filetype
set statusline+=\ [%{getcwd()}]          " current dir

" Search Options
set hlsearch
set incsearch
set ignorecase
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

" Indentation Options
set expandtab
set tabstop=4
retab
set shiftwidth=4

nmap <Space> i_<Esc>r
filetype plugin indent on
syntax on
colo delek

" CtrlP Map
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

" EasyMotion
map <Leader> <Plug>(easymotion-prefix)

" Rope Vim (for Python)
"let ropevim_vim_completion=1
"let ropevim_extended_complete=1

" Syntastic
nnoremap ZZ :call syntastic_extras#quit_hook()<cr>
let g:syntastic_python_checkers = ['pyflakes_with_warnings']
let g:syntastic_gitcommit_checkers = ['language_check']
let g:syntastic_javascript_checkers = ['json_tool']
let g:syntastic_svn_checkers = ['language_check']
let g:syntastic_dosini_checkers = ['dosini']
let g:syntastic_make_checkers = ['gnumake']
let g:syntastic_yaml_checkers = ['pyyaml']
let g:syntastic_cfg_checkers = ['cfg']
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_python_checkers = ['pyflakes', 'flake8']
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" Color Theme
colorscheme torte

" LightLine
set encoding=utf-8
scriptencoding utf-8
let g:lightline = {
      \ 'colorscheme': 'landscape',
      \ }
set laststatus=2

" GitGutter
nmap ]h <Plug>GitGutterNextHunk
nmap [h <Plug>GitGutterPrevHunk]
nmap <Leader>ha <Plug>GitGutterStageHunk
nmap <Leader>hu <Plug>GitGutterRevertHunk
nmap <Leader>hv <Plug>GitGutterPreviewHunk

" Gundo
nnoremap <F5> :GundoToggle<CR>

" Set Tmux+Vim Seamless
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" Solarized Colors
set background=dark
let g:solarized_termtrans=1
let g:solarized_termcolors=256
let g:solarized_contrast="normal"
let g:solarized_visibility="normal"
colorscheme solarized
let g:CSApprox_loaded = 1

" Highligh Line and Column
set cursorline
set cursorcolumn

" Run Python3 From VIM
nmap ,p :w<CR>:!python3 %<CR>
